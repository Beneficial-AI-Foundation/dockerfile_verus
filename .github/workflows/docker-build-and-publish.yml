name: Build and Publish Docker Images

on:
  push:
    branches:
      - master
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - master
      - main
  #schedule:
  #  # Weekly build to get latest Verus releases (Sundays at 2 AM UTC)
  #  - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild of all images'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: beneficial-ai-foundation/dockerfile_verus

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        include:
          - variant: stable
            verus_release_type: stable
            tags_suffix: ""
          - variant: prerelease
            verus_release_type: prerelease
            tags_suffix: "-prerelease"
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        # Note: Packages are private by default. To make them public, 
        # you need to manually change the visibility in GitHub Package settings
        # or use the GitHub API after publishing

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Branch-based tags
            type=ref,event=branch,suffix=${{ matrix.tags_suffix }}
            # Tag-based tags
            type=ref,event=tag,suffix=${{ matrix.tags_suffix }}
            # PR-based tags
            type=ref,event=pr,suffix=${{ matrix.tags_suffix }}
            # Latest tag for stable on main/master
            type=raw,value=latest${{ matrix.tags_suffix }},enable={{is_default_branch}},condition=${{ matrix.variant == 'stable' }}
            # Variant-specific latest
            type=raw,value=${{ matrix.variant }},enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Verus Verifier (${{ matrix.variant }})
            org.opencontainers.image.description=Docker container for Verus verification with Ubuntu 22.04, Rust 1.88.0, and Verus ${{ matrix.variant }} release
            org.opencontainers.image.vendor=Beneficial AI Foundation

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.verus
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            verus.release-type=${{ matrix.variant }}
          build-args: |
            VERUS_RELEASE_TYPE=${{ matrix.verus_release_type }}

      - name: Test Docker image
        run: |
          # Test that the image runs and Verus is properly installed
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.variant }} \
            /root/.cargo/bin/verus-x86-linux/verus --version

      - name: Make package public
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Make the package public using GitHub API
          PACKAGE_NAME="dockerfile_verus"
          ORG_NAME="beneficial-ai-foundation"
          
          # Get package version ID for the variant we just published
          PACKAGE_VERSION=$(echo "${{ steps.meta.outputs.tags }}" | head -n1 | cut -d':' -f2)
          
          echo "Making package $PACKAGE_NAME:$PACKAGE_VERSION public..."
          
          # Make the entire package public (affects all versions)
          curl -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/orgs/$ORG_NAME/packages/container/$PACKAGE_NAME" \
            -d '{"visibility":"public"}' || echo "Package may already be public or API call failed"

  create-release:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Verus versions
        id: verus-versions
        run: |
          STABLE_VERSION=$(curl -s https://api.github.com/repos/verus-lang/verus/releases | jq -r '.[] | select(.prerelease == false) | .tag_name' | head -n1)
          PRERELEASE_VERSION=$(curl -s https://api.github.com/repos/verus-lang/verus/releases | jq -r '.[0].tag_name')
          echo "stable=$STABLE_VERSION" >> $GITHUB_OUTPUT
          echo "prerelease=$PRERELEASE_VERSION" >> $GITHUB_OUTPUT

      - name: Create release packages
        run: |
          # Create downloadable packages with pre-built Docker images
          mkdir -p release-assets
          
          # Login to pull the images we just built
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull the images that were just built and pushed
          echo "Pulling stable Docker image..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable
          
          echo "Pulling prerelease Docker image..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prerelease
          
          # Export the Docker images as tar files
          echo "Exporting stable Docker image..."
          docker save ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable | gzip > release-assets/verus-docker-stable-${{ github.ref_name }}.tar.gz
          
          echo "Exporting prerelease Docker image..."
          docker save ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:prerelease | gzip > release-assets/verus-docker-prerelease-${{ github.ref_name }}.tar.gz
          
          # Also export with version tag if it exists
          if docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} 2>/dev/null; then
            echo "Exporting version-tagged stable image..."
            docker save ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} | gzip > release-assets/verus-docker-${{ github.ref_name }}.tar.gz
          fi
          
          if docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-prerelease 2>/dev/null; then
            echo "Exporting version-tagged prerelease image..."
            docker save ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-prerelease | gzip > release-assets/verus-docker-${{ github.ref_name }}-prerelease.tar.gz
          fi
          
          # Create a source package for users who want to customize
          echo "Creating source package..."
          
          # Only include files that exist
          SOURCE_FILES="Dockerfile.verus verify-verus.sh find_verus_functions.py README.md install.sh"
          if [ -f "build-revision.sh" ]; then
            SOURCE_FILES="$SOURCE_FILES build-revision.sh"
          fi
          
          tar -czf release-assets/verus-docker-source-${{ github.ref_name }}.tar.gz \
            $SOURCE_FILES \
            --transform 's,^,verus-docker-source-${{ github.ref_name }}/,'
          
          # Copy the install script to release assets
          cp install.sh release-assets/install.sh

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Verus Verifier Docker Images ${{ github.ref_name }}
          files: |
            release-assets/verus-docker-stable-${{ github.ref_name }}.tar.gz
            release-assets/verus-docker-prerelease-${{ github.ref_name }}.tar.gz
            release-assets/verus-docker-${{ github.ref_name }}.tar.gz
            release-assets/verus-docker-${{ github.ref_name }}-prerelease.tar.gz
            release-assets/verus-docker-source-${{ github.ref_name }}.tar.gz
            release-assets/install.sh
          body: |
            ## Verus Verifier Docker Images ${{ github.ref_name }}
            
            This release provides Docker images for Verus verification with the following Verus versions:
            
            - **Stable**: ${{ steps.verus-versions.outputs.stable }}
            - **Prerelease**: ${{ steps.verus-versions.outputs.prerelease }}
            
            ### ðŸ“¦ Download Pre-built Images
            
            **Ready-to-use Docker images** (no building required):
            
            - **`verus-docker-stable-${{ github.ref_name }}.tar.gz`** - Stable Verus release (recommended)
            - **`verus-docker-prerelease-${{ github.ref_name }}.tar.gz`** - Latest Verus prerelease
            - **`verus-docker-${{ github.ref_name }}.tar.gz`** - Stable release with version tag
            - **`verus-docker-${{ github.ref_name }}-prerelease.tar.gz`** - Prerelease with version tag
            
            **Additional files**:
            - **`install.sh`** - Automated installation script
            - **`verus-docker-source-${{ github.ref_name }}.tar.gz`** - Source code for customization
            
            ### ðŸš€ Quick Start (Pre-built Images)
            
            **Option 1: Use the installer script**
            ```bash
            # Download install.sh and a Docker image file, then:
            chmod +x install.sh
            ./install.sh
            ```
            
            **Option 2: Manual installation**
            ```bash
            # Download and load the image
            docker load < verus-docker-stable-${{ github.ref_name }}.tar.gz
            
            # Verify a project
            docker run --rm -v /path/to/project:/workspace ghcr.io/beneficial-ai-foundation/dockerfile_verus:stable \
              /usr/local/bin/verify-verus.sh --work-dir /workspace
            ```
            
            ### ï¿½ Docker Registry (Alternative)
            
            You can also pull directly from the registry instead of downloading:
            
            ```bash
            # Latest stable release
            docker pull ghcr.io/beneficial-ai-foundation/dockerfile_verus:latest
            docker pull ghcr.io/beneficial-ai-foundation/dockerfile_verus:stable
            docker pull ghcr.io/beneficial-ai-foundation/dockerfile_verus:${{ github.ref_name }}
            
            # Latest prerelease
            docker pull ghcr.io/beneficial-ai-foundation/dockerfile_verus:prerelease
            docker pull ghcr.io/beneficial-ai-foundation/dockerfile_verus:${{ github.ref_name }}-prerelease
            ```
            
            ### ðŸ“‹ Usage Examples
            
            ```bash
            # Verify entire project
            docker run --rm -v /path/to/project:/workspace ghcr.io/beneficial-ai-foundation/dockerfile_verus:latest \
              /usr/local/bin/verify-verus.sh --work-dir /workspace
            
            # Verify specific module
            docker run --rm -v /path/to/project:/workspace ghcr.io/beneficial-ai-foundation/dockerfile_verus:latest \
              /usr/local/bin/verify-verus.sh --work-dir /workspace \
              --verify-only-module module::path::name
            
            # Generate JSON report
            docker run --rm -v /path/to/project:/workspace ghcr.io/beneficial-ai-foundation/dockerfile_verus:latest \
              /usr/local/bin/verify-verus.sh --work-dir /workspace \
              --json-output /workspace/verification_report.json
            ```
            
            ### ðŸ”§ What's Included
            
            - **Base Image**: Ubuntu 22.04
            - **Rust Toolchain**: 1.88.0  
            - **Verus**: ${{ steps.verus-versions.outputs.stable }} (stable) / ${{ steps.verus-versions.outputs.prerelease }} (prerelease)
            - **Helper Scripts**: Flexible verification with module/function selection
            - **Architecture**: amd64/x86_64 only
            
            ðŸ“– See the [README](https://github.com/beneficial-ai-foundation/dockerfile_verus/blob/master/README.md) for complete usage instructions and examples.
          draft: false
          prerelease: false
