# Dockerfile to run Verus verification for a verus project
FROM ubuntu:22.04

# Build argument to choose between prerelease and stable
# Set to "prerelease" for latest prerelease, "stable" for latest stable release (default)
ARG VERUS_RELEASE_TYPE=stable

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV CARGO_TERM_COLOR=always
ENV RUSTFLAGS='-D warnings'

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    unzip \
    build-essential \
    pkg-config \
    libssl-dev \
    jq \
    python3 \
    && rm -rf /var/lib/apt/lists/*

# Install Rust toolchain 1.88.0
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.88.0
ENV PATH="/root/.cargo/bin:${PATH}"

# Verify Rust installation
RUN rustc --version && cargo --version

# Install latest Verus release (prerelease or stable based on build arg)
RUN RELEASE_JSON=$(curl -s https://api.github.com/repos/verus-lang/verus/releases) && \
    if [ "$VERUS_RELEASE_TYPE" = "stable" ]; then \
        RELEASE=$(echo "$RELEASE_JSON" | jq -r '.[] | select(.prerelease == false) | .tag_name' | head -n1); \
        echo "Installing stable release: $RELEASE"; \
    else \
        RELEASE=$(echo "$RELEASE_JSON" | jq -r '.[0].tag_name'); \
        echo "Installing prerelease: $RELEASE"; \
    fi && \
    RELEASE_DATA=$(echo "$RELEASE_JSON" | jq -r ".[] | select(.tag_name == \"$RELEASE\")") && \
    ASSET_NAME=$(echo "$RELEASE_DATA" | jq -r '.assets[] | select(.name | contains("x86-linux.zip")) | .name') && \
    echo "Asset name: $ASSET_NAME" && \
    DOWNLOAD_URL=$(echo "$RELEASE_DATA" | jq -r '.assets[] | select(.name | contains("x86-linux.zip")) | .browser_download_url') && \
    echo "Download URL: $DOWNLOAD_URL" && \
    wget "$DOWNLOAD_URL" && \
    unzip "$ASSET_NAME" && \
    mv verus-x86-linux /root/.cargo/bin/ && \
    cd /root/.cargo/bin && \
    ln -s verus-x86-linux/cargo-verus cargo-verus && \
    rm -f /verus-*.zip

# Set working directory where the project will be mounted
WORKDIR /workspace

# Create a script to handle flexible verification
COPY verify-verus.sh /usr/local/bin/verify-verus.sh
COPY find_verus_functions.py /usr/local/bin/find_verus_functions.py

# Make the scripts executable
RUN chmod +x /usr/local/bin/verify-verus.sh
RUN chmod +x /usr/local/bin/find_verus_functions.py

# Print Verus version for verification
RUN /root/.cargo/bin/verus-x86-linux/verus --version

# Default command to run Verus verification
# Can be overridden with docker run arguments
CMD ["/usr/local/bin/verify-verus.sh"]
